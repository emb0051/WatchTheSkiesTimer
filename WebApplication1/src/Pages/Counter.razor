@page "/"
@using System.Timers;

@if (debug)
{
    <p style="color: white">
        Current count: @counter::: half:@half :: ten:@ten :: PhaseName:@phaseName
        <br> RoundTime:@roundTime ::: @roundMinutes:@roundSeconds :: PhaseTime:@phaseTime
        <br> NumberOfRounds:@NumberOfRounds :: RoundNumber:@(roundNumber + 1) :: PhaseNumber: @(phaseNumber + 1)
    </p>
}

@if (showRemaining)
{
    <span style="color: black" @onclick="ToggleDebug">debug</span>
    <div class="time-to" style="display: flex; justify-content: space-between;">
        <span style="font-size: 32px">Round @(roundNumber + 1) @phaseName</span>
        <span class="time" style="font-size: 20px;">
            
            @if (roundSeconds < 10)
            {
               <span>Overall Time @roundMinutes:0@(roundSeconds)</span>
            }
            else
            {
                <span>Overall Time @roundMinutes:@roundSeconds</span>
            }

        </span>
    </div>
}



@if (@showRemaining)
{
<div class="time-to" style="font-size: 50px; background-color: @bkgColor; min-width: 650px;">

    <div style="color: @txtColor;">
        <div>Time Remaining</div>
        @* <div><strong style="font-size: 75px;"> @phaseName </strong></div> *@
    </div>
    <div class="time" style="font-size:200px; letter-spacing:2px; color:@txtColor"> 
    @if (seconds < 10)
    {
        <span>@minutes:0@(seconds)</span>
    }
    else
    {
        <span>@minutes:@seconds</span>
    }
    </div>
</div>
    @if (peekPhaseName != string.Empty)
     {
         <div class="time-to">
             <span style="font-size: 18px;">Up Next: Round @(roundNumber + 1)</span>
             <span style="font-size: 25px;">@peekPhaseName</span>
         </div>
     }
    else
    {
        @if (gameOn)
        {
            <div class="time-to">
                <span style="font-size: 18px;">Up Next: Round @(roundNumber + 2)</span>
            </div>
        }
        else
        {
            <div class="time-to">
                <span style="font-size: 25px;">Game End</span>
            </div>
        }
    }
}

@if (gameOver)
{
    <div class="title">Announcements</div>
    <span><button class="btn btn-primary button" @onclick="ResetGame">Reset</button></span>
}
else
{

@if (!@showRemaining)
{
    <div class="title">Aegon's<br>Conquest</div>
    <div class="time-to" @onkeyup="OnEnterKey">
        <span><button class="btn btn-primary button" @onclick="DoWork">Start Game</button></span>
        <span>
            Number of Rounds: <input type="password" @bind="NumberOfRounds"/><br/>
        </span>
    </div>


}
}
@if(showRemaining){
    <div class="time-to" style="display: flex; justify-content: space-between;">
    
    @if(!isPaused)
    {
        <span><button class="btn btn-primary button" @onclick="PauseWork">Pause</button></span>
    }
    else
    {
        <span><button class="btn btn-primary button" @onclick="ResumeWork">Resume</button></span>
        <span class="time">
            @if (stopwatchSeconds < 10)
            {
                <span>@stopwatchMinutes:0@(stopwatchSeconds)</span>
            }
            else
            {
                <span>@stopwatchMinutes:@stopwatchSeconds</span>
            }
        </span>
    }
    </div>
}

@code {
    private int? NumberOfRounds { get; set; }
    //static int interval = 0;//70;
    int initial = 0;
    int roundTime = 0;
    int phaseTime = 0;
    int roundNumber = 0;
    int phaseNumber = -1;

    string phaseName = string.Empty;

    Timer timer;
    Timer stopwatch;
    public int counter { get; set; } = -1;
    int stopwatchCount = 0;
    int stopwatchMinutes = 0;
    int stopwatchSeconds = 0;
    bool isPaused = false;
    bool gameOn = false;
    bool extraInnings = true;
    bool gameOver = false;

    int minutes = 0;
    int seconds = 0;
    
    int roundMinutes = 0;
    int roundSeconds = 0;

    int extraRound = 1;
    
    bool showRemaining = false;
    string bkgColor = string.Empty;
    string txtColor = string.Empty;
    string peekPhaseName = string.Empty;

    int half = 0;
    int ten = 0;
    bool debug = false;

    Game game = new Game(0);

    void DoWork()
    {
        game = new Game(NumberOfRounds.HasValue ? NumberOfRounds.Value : 0);
        gameOver = false;

        //counter = 70;
        //TimerStart(counter);

        counter = -1;
        roundNumber = 0;
        phaseNumber = -1;
        //TimerStart(counter);

        if (timer == null)
            timer = new Timer();

        timer.Interval = 1000;
        timer.Elapsed += TimerOnElapsed;
        
        System.Console.WriteLine(gameOn);

        bkgColor = "black";
        txtColor = "white";
        
        CalculateRound();
    }

    void PauseWork()
    {
        timer.Stop();
        
        
        //stopwatch
        stopwatch = new Timer();
        stopwatch.Interval = 1000;
        stopwatch.Elapsed += StopwatchOnElapsed;
        stopwatch.Enabled = true;

        isPaused = true;
        StateHasChanged();

    }

    void ResumeWork()
    {
        stopwatch.Dispose();
        stopwatchCount = 0;
        stopwatchMinutes = stopwatchSeconds = 0;
        isPaused = false;
        StateHasChanged();
        
        timer.Start();
    }

    private void OnEnterKey( KeyboardEventArgs e)
    {
        if (e.Key == "Enter" )        // fire on enter 
        {
            DoWork();
        }        
    }

    private void DoExtraInnings()
    {
        Console.WriteLine("DoExtraInnings");
        extraInnings = false;
        game.Rounds.Add(new Round { Phases = new Dictionary<string, int>{{"Game Over", 600}} }); //600
        roundTime = 0;
        
        CalculateRound();
    }

    private void StopwatchOnElapsed(object sender, ElapsedEventArgs e)
    {
        stopwatchCount++;
        
        stopwatchMinutes = stopwatchCount / 60;
        stopwatchSeconds = stopwatchCount % 60;
        
        StateHasChanged();
    }

    void TimerStart(int interval)
    {
        System.Console.WriteLine($"Begin TimeStart Process");
        initial = interval;
        minutes = interval / 60;
        seconds = interval % 60;

        roundMinutes = roundTime / 60;
        roundSeconds = roundTime % 60;

        timer.Enabled = true;
        timer.Start();

        showRemaining = true;
    }

    private void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        CalculateRound();
        UpdateUI();
    }

    private void CalculateRound()
    {
        if (counter <= 0)
        {
            System.Console.WriteLine($"CalculateRound Start");
            Console.WriteLine("round number: " + roundNumber);

            if (roundNumber < game.Rounds.Count)
            {
                gameOn = roundNumber + 1 < game.Rounds.Count;
                
                var round = game.Rounds[roundNumber];
                Console.WriteLine("roundTime: " + roundTime);

                if (roundTime <= 0)
                {
                    var totalroundTime = round.Phases.Sum(p => p.Value);
                    Console.WriteLine($"total round time from phases sum: {totalroundTime}");
                    roundTime = round.Phases.Sum(p => p.Value);
                    System.Console.WriteLine($"RoundTime Set");
                }

                if (++phaseNumber < round.Phases.Count)
                {
                    Console.WriteLine($"Phase Check");
                    System.Console.WriteLine($"Round: {roundNumber + 1} Phase Start: {phaseNumber + 1}");
                    phaseName = round.Phases.ElementAt(phaseNumber).Key;
                    phaseTime = round.Phases.ElementAt(phaseNumber).Value;
                    Console.WriteLine($"PhaseTime: {phaseTime}");
                    counter = phaseTime;
                    TimerStart(counter);
                    
                    peekPhaseName = phaseNumber + 1 < round.Phases.Count ?
                        round.Phases.ElementAt(phaseNumber + 1).Key : string.Empty;
                    StateHasChanged();

                }
                else
                {
                    System.Console.WriteLine($"Turn Number Change");
                    roundNumber++;
                    phaseNumber = -1;
                    System.Console.WriteLine("gameOn" + gameOn);
                    CalculateRound();
                }
            }
            else
            {
                Console.WriteLine("Extra Innings: " + extraInnings);
                if (extraInnings)
                {
                    DoExtraInnings();
                }
                else
                {
                    gameOn = false;
                    gameOver = true;
                    System.Console.WriteLine(gameOn);
                    if (timer != null)
                    {
                        timer.Enabled = false;
                        game = null;
                        Dispose();
                    }
                }
            }
        }
        // else
        // {
        //     Console.WriteLine("Count is Zero (or less)");
        // }
    }

    private void UpdateUI()
    {
        timer.Stop();
        if (counter >= 0)
        {
            minutes = counter / 60;
            seconds = counter % 60;

            roundMinutes = roundTime / 60;
            roundSeconds = roundTime % 60;

            half = (int)(initial * .5);
            ten = (int)(initial * .1);

            if (counter >= half)
            {
                bkgColor = "green";
                txtColor = "white";
            }
            if (counter < half && counter >= ten)
            {
                bkgColor = "yellow";
                txtColor = "black";
            }
            if (counter < ten)
            {
                bkgColor = "red";
                txtColor = "white";
            }

            counter--;
            roundTime--;
            StateHasChanged();
        }
        timer.Start();
    }

    public void Dispose()
    {
        if (timer != null)
        {
            //timer.Dispose();
            timer.Stop();
            timer = null;
        }
        roundNumber = 0;
        showRemaining = false;
        StateHasChanged();
    }

    private void ToggleDebug()
    {
        debug = !debug;
        StateHasChanged();
    }

    private void ResetGame()
    {
        game = new Game(0);
        gameOver = false;
    }
    
    //public class Phase
    //{
    //    public string Name { get; set; }
    //    public int Length { get; set; }
    //}

    public class Round
    {
        public Round()
        {
            // Phases.Add("Team", 600); //600
            // Phases.Add("Action", 900); //900
            // Phases.Add("Diplomacy", 600); //600
            // Phases.Add("Cleanup", 300); //300
            Phases.Add(String.Empty, 1800); //1800
            Phases.Add("Break", 300); //300
        }

        public Dictionary<string, int> Phases { get; set; } = new Dictionary<string, int>();
    }

    public class Game
    {
        public Game(int numOfRounds)
        {
            System.Console.WriteLine($"numOfRounds: {numOfRounds}");
            for (int i = 0; i < numOfRounds; i++)
            {
                var round = new Round();
                Rounds.Add(round);
            }
            System.Console.WriteLine($"Ctor Rounds.Count: {Rounds.Count}");
        }

    //public int NumOfRounds { get; set; }
        public List<Round> Rounds { get; } = new List<Round>();
    }

    //public enum PhaseName
    //{
    //    Team, Action, Diplomacy, Cleanup
    //}
}
